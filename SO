// C Program to Implement Safety Algorithm- (Banker's Algorithm- Deadlock Avoidance Algorithm) 
//This algo Prints whether the given system state is in SAFE state or UNSAFE state. If safe, then prints the SAFE SEQUENCE

#include <stdio.h>
#include <stdbool.h>

struct process_info
{
    int max[10];
    int allocated[10];
    int need[10];
};

int no_of_process,no_of_resources;

//Take the input 
void input(struct process_info process[no_of_process],int available[no_of_resources])
{
    //Fill array of Structure
    for(int i=0;i<no_of_process;i++)
    {
      //printf("Enter process[%d] info\n",i);
     // printf("Enter Maximum Need: ");
      for(int j=0;j<no_of_resources;j++)
        scanf("%d",&process[i].max[j]);
     // printf("Enter No. of Allocated Resources for this process: ");
      for(int j=0;j<no_of_resources;j++)
      {
        scanf("%d",&process[i].allocated[j]); 
        //calculate need/future need 
        process[i].need[j]= process[i].max[j] - process[i].allocated[j];
      }
    }
   // printf("Enter Available Resources: ");
    for(int i=0;i<no_of_resources;i++)
    {
      scanf("%d",&available[i]);
    }
}

//Print the Info in Tabular Form
void showTheInfo(struct process_info process[no_of_process])
{
    printf("\nPID\tMaximum\t\tAllocated\tNeed\n");
    for(int i=0;i<no_of_process;i++)
    {
        printf("P[%d]\t",i);
        for(int j=0;j<no_of_resources;j++)
           printf("%d ",process[i].max[j]);
        printf("\t\t");
        for(int j=0;j<no_of_resources;j++)
           printf("%d ",process[i].allocated[j]); 
        printf("\t\t");
        for(int j=0;j<no_of_resources;j++)
           printf("%d ",process[i].need[j]);
        printf("\n");

    }
}

//Apply safety algo
bool applySafetyAlgo(struct process_info process[no_of_process],int available[no_of_resources],int safeSequence[no_of_process])
{
   bool finish[no_of_process];
   int work[no_of_resources];  
   for(int i=0;i<no_of_resources;i++)
   {
      work[i]=available[i];      
   }
   for(int i=0;i<no_of_process;i++)
     finish[i]=false;    
   bool proceed=true;
   int k=0;
   while(proceed)
   {
     proceed=false;
     for(int i=0;i<no_of_process;i++)
     {    
         bool flag=true;
         //Find Index i
         
         if(finish[i]==false)
         {
           
           for(int j=0;j<no_of_resources;j++)
           {
             //if Need <= Work
             if(process[i].need[j] <= work[j])
             {
               continue;
             }
             else
             {
               flag=false;  // implies that the current process need > work
               break;
             }
           }
           if(flag==false)
             continue;    //check for next process
          
          //If we get Index i(or process i), update work  
          for(int j=0;j<no_of_resources;j++)   
            work[j]=work[j]+ process[i].allocated[j];
          finish[i]=true;
          safeSequence[k++]=i;
          proceed=true;    // tells that we got atleast one process in safe state, we can proceed
          
         }
       }//end of outer for loop

     } // end of while

     //check finish array
     int i;
     for( i=0;i<no_of_process&&finish[i]==true;i++)
     {
       continue;
     }
     //If all processes are completed, then return true
     if(i==no_of_process)
      return true;
     else
      return false;
}

//Checks if we State is safe or not
bool isSafeState(struct process_info process[no_of_process],int available[no_of_resources],int safeSequence[no_of_process])
{
     
    if(applySafetyAlgo(process,available,safeSequence)==true)
      return true;
    return false;
   
}


int main()
{
  //  printf("Enter No of Process\n");
    scanf("%d",&no_of_process);
   // printf("Enter No of Resource Instances in system\n");
    scanf("%d",&no_of_resources);
    int available[no_of_resources];
    int safeSequence[no_of_process];
    //Create Array of Structure to store Processes's Informations
    struct process_info process[no_of_process];
   
   // printf("***********Enter details of processes*************\n");
    //Take the Input
    input(process,available);

    //Print the Info in Tabular Form 
   // showTheInfo(process);
    if(isSafeState(process,available,safeSequence))
    {

    //  printf("\nSystem is in SAFE State\n");
    //  printf("Safe Sequence is: ");
   //   for(int i=0;i<no_of_process;i++)
       // printf("P[%d] ",safeSequence[i]);
  printf("1");
    }
    else
      printf("0");
    return 0;
}

// C program to implement CSCAN Disk Scheduling algorithm

#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

int comparator(const void * a, const void *b)
{
   int x =*(int *)a;
   int y =*(int *)b;
   if(x<y)
     return -1;  // No sorting
   else if( x>=y) // = is for stable sort
    return 1;    // Sort
} 

int min_element(int request_queue[],int n)
{
    int min = INT_MAX;
    for(int i=0;i<n;i++)
    {
       if(request_queue[i] < min)
          min = request_queue[i];
    }
    return min;  
}

int max_element(int request_queue[],int n)
{
   int max = INT_MIN;
   for(int i=0;i<n;i++)
   {
      if(request_queue[i] > max)
          max = request_queue[i];
   }
    return max;  
}


int moveRight(int left[],int right[],int j,int k,int total_cylinders, int request_queue[], int initial_pos, int seek_sequence[],int *sequence_size,int n)
{
    //j is right array size and k is left array size
   int total_head_movement=0; 
   for (int i = 0; i < j; i++) 
   {
        // calculate absolute distance
        total_head_movement += abs(initial_pos - right[i]);	
        initial_pos = right[i];
        // appending current track to seek sequence
        seek_sequence[*sequence_size]=right[i]; 
        (*sequence_size)++;
   }

   k ?  total_head_movement += (total_cylinders - 1): 0 ;
   initial_pos = 0;
   
   //move right again if needed (i.e if left array is not empty)
   for (int i = 0; i < k; i++) 
   {
        // calculate absolute distance
        total_head_movement += abs(initial_pos - left[i]);	
        initial_pos = left[i];
        // appending current track to seek sequence
        seek_sequence[*sequence_size]=left[i]; 
        (*sequence_size)++;
   }
   
   return total_head_movement;
}


int moveLeft(int left[],int right[],int j, int k,int total_cylinders, int request_queue[], int initial_pos, int seek_sequence[],int *sequence_size,int n)
{
   int total_head_movement=0; 
   for (int i = k - 1; i >=0; i--) 
   {
        // calculate absolute distance
        total_head_movement += abs(initial_pos - left[i]);	
        initial_pos = left[i];
        // appending current track to seek sequence
        seek_sequence[*sequence_size]=left[i]; 
        (*sequence_size)++;
   }
   j ?  total_head_movement += (total_cylinders - 1): 0 ;
   initial_pos = total_cylinders - 1;
   
   //move right
   for (int i = j -1; i >=0; i--)
   {
        // calculate absolute distance
        total_head_movement += abs(initial_pos - right[i]);	
        initial_pos = right[i];
        // appending current track to seek sequence
        seek_sequence[*sequence_size]=right[i]; 
        (*sequence_size)++; 
   }
   return total_head_movement;
}

int applyCSCANAlgo(int total_cylinders, int request_queue[], int initial_pos, int seek_sequence[], int * sequence_size,int direction,int n)
{
	int total_head_movement=0,j=0,k=0;
	int left[n+1], right[n+1];  //in worst case(corner cases), size will be n+1

	// appending end values which has to be visited during reversing the direction
    if( ( initial_pos > min_element(request_queue,n)) && (initial_pos < max_element(request_queue,n)) )
    {
          right[j++] = total_cylinders - 1;
          left[k++] = 0;  //here  0 is initial cylinder of HDD
    }
    

    //Decide on basis of direction where to put initial position (this is only needed if we want to print this initia_pos also
    // in seek_sequence otherwise remove thsi if-else
	if(direction == 0)
        right[j++] = initial_pos;
    else if(direction == 1)
        left[k++] = initial_pos;    

	for (int i = 0; i<n; i++) 
    {
		if (request_queue[i] < initial_pos)
			left[k++]=request_queue[i];
		if (request_queue[i] > initial_pos)
			right[j++]=request_queue[i];
	}
  
	// sorting left and right arrays
    qsort((void *)left,k, sizeof(int),comparator);
    qsort((void *)right,j, sizeof(int),comparator);

	if(direction == 0 ) //right
        total_head_movement += moveRight(left, right,j,k, total_cylinders,request_queue, initial_pos, seek_sequence,sequence_size,n);
    else if(direction == 1 ) //left
       total_head_movement += moveLeft( left,right,j,k, total_cylinders, request_queue,  initial_pos, seek_sequence,sequence_size,n);
    return total_head_movement;
}


int main()
{
    int total_cylinders,total_head_movement=0,initial_pos,n,direction,pos;
    printf("\nEnter the total no. of cylinders in HDD:\n");
    scanf("%d",&total_cylinders);

    printf("\nEnter the no. of cylinders to enter in Request queue:\n");
    scanf("%d",&n);
    
    int request_queue[n];
    int seek_sequence[n+10];   // i.e take somewhat bigger size than n
    int sequence_size=0;

    printf("\nEnter the cylinders no. in Request queue :\n");
    for(int i=0;i<n;i++)
     scanf("%d",&request_queue[i]);
    printf("\nEnter the initial Position of RW head: ");
    scanf("%d",&initial_pos);
    printf("\nEnter the direction in which Read Write head is moving:\n ");
    printf("\nEnter 0 if moving to higher cylinder else Enter 1: ");
    scanf("%d",&direction);
    
    if(initial_pos < 0 || initial_pos > total_cylinders - 1)
    {
        printf("Wrong Initial Position Enetered !!");
        exit(0);
    }
    
    total_head_movement = applyCSCANAlgo(total_cylinders, request_queue,initial_pos,seek_sequence,&sequence_size,direction,n);
    
    // *********** OUTPUT ********** 
    printf("\n\n*********** OUTPUT **********");
    printf("\nSeek Sequence: ");
    for(int i=0;i<sequence_size;i++)
     printf("%d ",seek_sequence[i]);

    printf("\nTotal No. of Head Movements = %d\n",total_head_movement);
    printf("\nAverage head movements = %.2f\n\n",(float)total_head_movement/n);

    return 0;
}


/*.................C Program to Implement FCFS ( First Come First Serve ) CPU SCheduling Algorithm.....................
FCFS - A Non Preemptive Algorithm
This Program works for same as well as different arrival times
*/
#include<stdio.h>
#include <stdlib.h>
struct process_struct
{
  int pid;  
  int at;       //Arrival Time
  int bt;       //CPU Burst time 
  int ct,wt,tat,rt,start_time;   // Completion, waiting, turnaround, response time
}ps[100];       //Array of structure to store the info of each process.   


int findmax(int a, int b)
{
    return a>b?a:b;
}

int comparatorAT(const void * a, const void *b)
{
   int x =((struct process_struct *)a) -> at;
   int y =((struct process_struct *)b) -> at;
   if(x<y)
     return -1;  // No sorting
   else if( x>=y) // = is for stable sort
    return 1;    // Sort
} 

int comparatorPID(const void * a, const void *b)
{
   int x =((struct process_struct *)a) -> pid;
   int y =((struct process_struct *)b) -> pid;
   if(x<y)
     return -1;  // No sorting
   else if( x>=y)
    return 1;    // Sort  
} 

int main()
{
    int n;
    printf("Enter total number of processes: ");
    scanf("%d",&n);
    float sum_tat=0,sum_wt=0,sum_rt=0;
    int length_cycle,total_idle_time=0;
    float cpu_utilization;
    
    for(int i=0;i<n;i++)
    {
        printf("\nEnter Process %d Arrival Time: ",i);
        scanf("%d",&ps[i].at);
        ps[i].pid = i ;
    }
    
    for(int i=0;i<n;i++)
    {
        printf("\nEnter Process %d Burst Time: ",i);
        scanf("%d",&ps[i].bt);
    }
    

    //sort
    qsort((void *)ps,n, sizeof(struct process_struct),comparatorAT);
   
   //calculations
    for(int i=0;i<n;i++)
    {
      ps[i].start_time = (i==0) ? ps[i].at : findmax(ps[i].at, ps[i-1].ct);  
      ps[i].ct =  ps[i].start_time + ps[i].bt;
      ps[i].tat = ps[i].ct-ps[i].at;       
      ps[i].wt = ps[i].tat-ps[i].bt;
      ps[i].rt=ps[i].wt;
       
      sum_tat += ps[i].tat;
      sum_wt += ps[i].wt;
      sum_rt += ps[i].rt;
      total_idle_time += (i==0) ? 0 : (ps[i].start_time -  ps[i-1].ct);
    }
    
    length_cycle = ps[n-1].ct - ps[0].start_time; 
    
    //sort so that process ID in output comes in Original order (just for interactivity)
    qsort((void *)ps,n, sizeof(struct process_struct),comparatorPID);

    //Output
    printf("\nProcess No.\tAT\tCPU Burst Time\tCT\tTAT\tWT\tRT\n");
    for(int i=0;i<n;i++)
     printf("%d\t\t%d\t%d\t\t%d\t%d\t%d\t%d\n",ps[i].pid,ps[i].at,ps[i].bt,ps[i].ct,ps[i].tat,ps[i].wt,ps[i].rt);

    printf("\n");    
    
    cpu_utilization = (float)(length_cycle - total_idle_time)/ length_cycle;

    printf("\nAverage Turn Around time= %f ",sum_tat/n);
    printf("\nAverage Waiting Time= %f ",sum_wt/n);
    printf("\nAverage Response Time= %f ",sum_rt/n);
    printf("\nThroughput= %f",n/(float)length_cycle);    
    printf("\nCPU Utilization(Percentage)= %f",cpu_utilization*100);

    printf("\n");
    return 0;
}

//C Program to Implement the FCFS Disk Scheduling
#include<stdio.h>

int main()
{
    int total_head_movement=0,initial_pos,n ;
    printf("\n Enter the no. of cylinders in Request queue:\n");
    scanf("%d",&n);
    int request_queue[n]; 
    printf("\n Enter the cylinders no. in Request queue :\n");
    for(int i=0;i<n;i++)
     scanf("%d",&request_queue[i]);
    printf("\n Enter the initial Position of RW head: ");
    scanf("%d",&initial_pos);
    for(int i=0;i<n;i++)
    {
        total_head_movement += abs(initial_pos - request_queue[i]);
        initial_pos = request_queue[i];
    }    
   
   printf("\nTotal No. of Head Movements = %d\n",total_head_movement);
   printf("\nAverage head movements = %.2f\n",(float)total_head_movement/n);

   return 0;
}


// C program to implement LOOK Disk Scheduling algorithm

#include<stdio.h>
#include<stdlib.h>

int comparator(const void * a, const void *b)
{
   int x =*(int *)a;
   int y =*(int *)b;
   if(x<y)
     return -1;  // No sorting
   else if( x>=y) // = is for stable sort
    return 1;    // Sort
} 

int applySCANAlgo(int total_cylinders,int request_queue[], int initial_pos, int seek_sequence[], int direction,int *sequence_size,int n)
{
	int total_head_movement=0,j=0,k=0;
	int left[n], right[n];

    //Change wrt SCAN algo
	if (direction == 0)
        right[j++]=initial_pos;
    else if (direction == 1)
        left[k++]=initial_pos;   
    
	for (int i = 0; i<n; i++) {
		if (request_queue[i] < initial_pos)
			left[k++]=request_queue[i];
		if (request_queue[i] > initial_pos)
			right[j++]=request_queue[i];
	}
   
	// sorting left and right arrays
    qsort((void *)left,k, sizeof(int),comparator);
    qsort((void *)right,j, sizeof(int),comparator);
    

	// run the while loop two times one by one scanning right and left of the head
	int completed = 2;
	while (completed--)
    {
        if (direction == 0) 
        {
			for (int i = 0; i < j; i++) 
            {
                // calculate absolute distance
                total_head_movement += abs(initial_pos - right[i]);	
                initial_pos = right[i];
                // appending current track to seek sequence
                seek_sequence[*sequence_size]=right[i]; 
                (*sequence_size)++;
               
            }
            direction = 1;
		}

		else if (direction == 1)
        {
			for (int i = k - 1; i >= 0; i--) 
            {
                // calculate absolute distance
				total_head_movement +=  abs(initial_pos - left[i]);	
                initial_pos = left[i];
                // appending current track to seek sequence
                seek_sequence[*sequence_size]=left[i]; 
                (*sequence_size)++;
            }
            direction = 0;
		}
		
	}

    return total_head_movement;
}

int main()
{
    int total_cylinders,total_head_movement=0,initial_pos,n,direction,pos;
    
  
    printf("\nEnter the total no. of cylinders in HDD:\n");
    scanf("%d",&total_cylinders);

    printf("\nEnter the no. of cylinders to enter in Request queue:\n");
    scanf("%d",&n);
    
    int request_queue[n];
    int seek_sequence[n+10];   // i.e take somewaht bigger size than n
    int sequence_size=0;

    printf("\nEnter the cylinders no. in Request queue :\n");
    for(int i=0;i<n;i++)
     scanf("%d",&request_queue[i]);
    printf("\nEnter the initial Position of RW head: ");
    scanf("%d",&initial_pos);
    printf("\nEnter the direction in which Read Write head is moving:\n ");
    printf("\nEnter 0 if moving to higher cylinder else Enter 1: ");
    scanf("%d",&direction);

    if(initial_pos < 0 || initial_pos > total_cylinders - 1)
    {
        printf("Wrong Initial Position Enetered !!");
        exit(0);
    }
    
    total_head_movement = applySCANAlgo(total_cylinders,request_queue,initial_pos,seek_sequence,direction,&sequence_size,n);
    
    
    // *********** OUTPUT ********** 
    printf("\n\n*********** OUTPUT **********");
    printf("\nSeek Sequence: ");
    for(int i=0;i<sequence_size;i++)
     printf("%d ",seek_sequence[i]);

    printf("\nTotal No. of Head Movements = %d\n",total_head_movement);
    printf("\nAverage head movements = %.2f\n\n",(float)total_head_movement/n);

    return 0;
}


#include<stdio.h>
#include<stdbool.h>
#include<limits.h>

struct process_struct
{
  
  int at;
  int bt;
  int priority;
  int ct,wt,tat,rt,start_time;
}ps[100];

int findmax(int a, int b)
{
    return a>b?a:b;
}

int findmin(int a, int b)
{
    return a<b?a:b;
}

int main()
{
    
    int n;
    bool is_completed[100]={false},is_first_process=true;
    int current_time = 0;
    int completed = 0;
    int total_idle_time=0,prev=0,length_cycle;
    float cpu_utilization;
    int max_completion_time,min_arrival_time;
    //printf("Enter total number of processes");
    scanf("%d",&n);    
    float sum_tat=0,sum_wt=0,sum_rt=0;

    int i;
    
    //printf("\nEnter Process Number\n");
    // for(i=0;i<n;i++)
    // {
    //   scanf("%f",&ps[i].process_num);
    // }
    //printf("\nEnter Process Arrival Time\n");
    for(i=0;i<n;i++)
    {
      scanf("%d",&ps[i].at);
    }
    //printf("\nEnter Process Burst Time\n");
    for(i=0;i<n;i++)
      scanf("%d",&ps[i].bt);
    //printf("\nEnter Priority\n");
    for(i=0;i<n;i++)
      scanf("%d",&ps[i].priority);
   
    while(completed!=n)
    {
        //find process with min. burst time in ready queue at current time
        int max_index = -1;
        int maximum = -1;
        for(int i = 0; i < n; i++) {
            if(ps[i].at <= current_time && is_completed[i] == 0) {
                if(ps[i].priority > maximum) {
                    maximum = ps[i].priority;
                    max_index = i;
                }
                if(ps[i].priority== maximum) {
                    if(ps[i].at < ps[max_index].at) {
                        maximum= ps[i].priority;
                        max_index = i;
                    }
                }
            }
        }

    
    if(max_index==-1)
    {
        current_time++;
    }
    else
    {
       ps[max_index].start_time = current_time;
       ps[max_index].ct = ps[max_index].start_time + ps[max_index].bt;
       ps[max_index].tat = ps[max_index].ct - ps[max_index].at;
       ps[max_index].wt= ps[max_index].tat - ps[max_index].bt;
       ps[max_index].rt = ps[max_index].start_time - ps[max_index].at;
       total_idle_time += (is_first_process==true) ? 0 : (ps[max_index].start_time -  prev);
     
       sum_tat +=ps[max_index].tat;
       sum_wt += ps[max_index].wt;
       sum_rt += ps[max_index].rt;
       completed++;
       is_completed[max_index]=true;
       current_time = ps[max_index].ct;
       prev= current_time;
       is_first_process = false; 
      
           
    }
  }
  //Calculate Length of Process completion cycle
    max_completion_time = INT_MIN;
    min_arrival_time = INT_MAX;
    for(int i=0;i<n;i++)
    {
        max_completion_time = findmax(max_completion_time,ps[i].ct);
        min_arrival_time = findmin(min_arrival_time,ps[i].at);
    }
    length_cycle = max_completion_time - min_arrival_time;
    cpu_utilization = (float)(length_cycle - total_idle_time)/ length_cycle;
    
    //Start times
    for(int i=0;i<n;i++)
    {
        printf("%d ",ps[i].start_time);
    }
    printf("\n");
    //completion times
    for(int i=0;i<n;i++)
    {
        printf("%d ",ps[i].ct);
    }
    printf("\n%.2f",sum_tat/n);
    printf("\n%.2f",sum_wt/n);
    printf("\n%.2f",sum_rt/n);
    printf("\n%.2f",n/(float)length_cycle);    
    printf("\n%.2f",cpu_utilization*100);
    return 0;
}


#include<stdio.h>
#include<stdbool.h>
struct process_struct
{
  
  int at;
  int bt;
  int priority;
  int ct,wt,tat,rt,start_time;
}ps[100];

int main()
{
    
    int n;
    bool is_completed[100]={false};
    int bt_remaining[100];
    int current_time = 0;
    int completed = 0;;
    //printf("Enter total number of processes");
    scanf("%d",&n);    
    float sum_tat=0,sum_wt=0,sum_rt=0;

    int i;
    
    //printf("\nEnter Process Number\n");
    // for(i=0;i<n;i++)
    // {
    //   scanf("%f",&ps[i].process_num);
    // }
    //printf("\nEnter Process Arrival Time\n");
    for(i=0;i<n;i++)
    {
      scanf("%d",&ps[i].at);
    }
    //printf("\nEnter Process Burst Time\n");
    for(i=0;i<n;i++)
      scanf("%d",&ps[i].bt);
    //printf("\nEnter Priority\n");
    for(i=0;i<n;i++)
      scanf("%d",&ps[i].priority);
   
    while(completed!=n)
    {
        //find process with min. burst time in ready queue at current time
        int max_index = -1;
        int maximum = -1;
        for(int i = 0; i < n; i++) {
            if(ps[i].at <= current_time && is_completed[i] == 0) {
                if(ps[i].priority > maximum) {
                    maximum = ps[i].priority;
                    max_index = i;
                }
                if(ps[i].priority== maximum) {
                    if(ps[i].at < ps[max_index].at) {
                        maximum= ps[i].priority;
                        max_index = i;
                    }
                }
            }
        }

   // printf("max Index=%d ",max_index);
    if(max_index==-1)
    {
        current_time++;
    }
    else
    {
       if(bt_remaining[max_index]==ps[max_index].bt)
           ps[max_index].start_time = current_time;

       bt_remaining[max_index]--;
       current_time++;
       
       if(bt_remaining[max_index]==0)
       {
            ps[max_index].start_time = current_time;
            ps[max_index].ct = ps[max_index].start_time + ps[max_index].bt;
            ps[max_index].tat = ps[max_index].ct - ps[max_index].at;
            ps[max_index].wt= ps[max_index].tat - ps[max_index].bt;
            ps[max_index].rt = ps[max_index].start_time - ps[max_index].at;
            
            
            sum_tat +=ps[max_index].tat;
            sum_wt += ps[max_index].wt;
            sum_rt += ps[max_index].rt;
            completed++;
            is_completed[max_index]=true;
            
            printf("Max=%d ", ps[max_index].ct);
       }
    }
  }
    for(int i=0;i<n;i++)
    {
        printf("%.2d ",ps[i].ct);
    }
    
    printf("\n%.2f",sum_tat/n);
    printf("\n%.2f",sum_wt/n);
    printf("\n%.2f",sum_rt/n);
    return 0;
}

// C program to implement Round Robin CPU Scheduling Algorithm 

#include<stdio.h>
#include<limits.h>
#include<stdbool.h>  //for bool datatype
#include <stdlib.h> //for qsort

struct process_struct
{
  int pid;
  int at;
  int bt;
  int ct,wt,tat,rt,start_time;
  int bt_remaining;
}ps[100];


int findmax(int a, int b)
{
    return a>b?a:b;
}

int comparatorAT(const void * a, const void *b)
{
   int x =((struct process_struct *)a) -> at;
   int y =((struct process_struct *)b) -> at;
   if(x<y)
     return -1;  // No sorting
   else if( x>=y) // = is for stable sort
    return 1;    // Sort
}

int comparatorPID(const void * a, const void *b)
{
   int x =((struct process_struct *)a) -> pid;
   int y =((struct process_struct *)b) -> pid;
   if(x<y)
     return -1;  // No sorting
   else if( x>=y)
    return 1;    // Sort
}

int main()
{
    
    int n,index;
    int cpu_utilization;
    //queue<int> q;
   
    bool visited[100]={false},is_first_process=true;
    int current_time = 0,max_completion_time;
    int completed = 0,tq, total_idle_time=0,length_cycle;
    printf("Enter total number of processes: ");
    scanf("%d",&n);    
    int queue[100],front=-1,rear=-1;
    float sum_tat=0,sum_wt=0,sum_rt=0;
   

    for(int i=0;i<n;i++)
    {
        printf("\nEnter Process %d Arrival Time: ",i);
        scanf("%d",&ps[i].at);
        ps[i].pid=i;
    }
    
    for(int i=0;i<n;i++)
    {
       printf("\nEnter Process %d Burst Time: ",i); 
       scanf("%d",&ps[i].bt);
       ps[i].bt_remaining= ps[i].bt;
    }
    
    printf("\nEnter time quanta: ");
    scanf("%d",&tq);
    
    //sort structure on the basis of Arrival time in increasing order
    qsort((void *)ps,n, sizeof(struct process_struct),comparatorAT);
   // q.push(0); 
    front=rear=0;
    queue[rear]=0;    
    visited[0] = true;
   
    while(completed != n) 
    {
      index = queue[front];      
      //q.pop();
      front++;
      
      if(ps[index].bt_remaining == ps[index].bt)
      {
            ps[index].start_time = findmax(current_time,ps[index].at);
            total_idle_time += (is_first_process == true) ? 0 : ps[index].start_time - current_time;
            current_time =  ps[index].start_time;
            is_first_process = false;
             
      }

      if(ps[index].bt_remaining-tq > 0)
      {    
            ps[index].bt_remaining -= tq;
            current_time += tq;
      }
      else 
      {
            current_time += ps[index].bt_remaining;
            ps[index].bt_remaining = 0;
            completed++;

            ps[index].ct = current_time;
            ps[index].tat = ps[index].ct - ps[index].at;
            ps[index].wt = ps[index].tat - ps[index].bt;
            ps[index].rt = ps[index].start_time - ps[index].at;

            sum_tat += ps[index].tat;
            sum_wt += ps[index].wt;
            sum_rt += ps[index].rt;
             
      }


       //check which new Processes needs to be pushed to Ready Queue from Input list
      for(int i = 1; i < n; i++) 
      {
          if(ps[i].bt_remaining > 0 && ps[i].at <= current_time && visited[i] == false) 
          {
            //q.push(i);
            queue[++rear]=i;
            visited[i] = true;
          }
      }
      //check if Process on CPU needs to be pushed to Ready Queue
      if( ps[index].bt_remaining> 0) 
          //q.push(index);
          queue[++rear]=index;
    
            
      //if queue is empty, just add one process from list, whose remaining burst time > 0
      if(front>rear)
      {
          for(int i = 1; i < n; i++)
          {
            if(ps[i].bt_remaining > 0)
            {
              queue[rear++]=i;
              visited[i] = true;
              break;
            }
          }
      }
   } //end of while
   
   //Calculate Length of Process completion cycle
  max_completion_time = INT_MIN;
  
  for(int i=0;i<n;i++)
        max_completion_time = findmax(max_completion_time,ps[i].ct);
      
  length_cycle = max_completion_time - ps[0].at;  //ps[0].start_time; 
    
  cpu_utilization = (float)(length_cycle - total_idle_time)/ length_cycle;

  //sort so that process ID in output comes in Original order (just for interactivity- Not needed otherwise)  
  qsort((void *)ps,n, sizeof(struct process_struct),comparatorPID);

  //Output
  printf("\nProcess No.\tAT\tCPU Burst Time\tStart Time\tCT\tTAT\tWT\tRT\n");
  for(int i=0;i<n;i++)
    printf("%d\t\t%d\t%d\t\t%d\t\t%d\t%d\t%d\t%d\n",i,ps[i].at,ps[i].bt,ps[i].start_time,ps[i].ct,ps[i].tat,ps[i].wt,ps[i].rt);
  printf("\n");    

  printf("\nAverage Turn Around time= %.2f",(float)sum_tat/n);
  printf("\nAverage Waiting Time= %.2f",(float)sum_wt/n);
  printf("\nAverage Response Time= %.2f",(float)sum_rt/n);    
  printf("\nThroughput= %.2f",n/(float)length_cycle);
  printf("\nCPU Utilization(Percentage)= %.2f",cpu_utilization*100);
  return 0;
}

// C program to implement SCAN Disk Scheduling algorithm

#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

int comparator(const void * a, const void *b)
{
   int x =*(int *)a;
   int y =*(int *)b;
   if(x<y)
     return -1;  // No sorting
   else if( x>=y) // = is for stable sort
    return 1;    // Sort
} 

int min_element(int request_queue[],int n)
{
    int min = INT_MAX;
    for(int i=0;i<n;i++)
    {
       if(request_queue[i] < min)
          min = request_queue[i];
    }
    return min;  
}

int max_element(int request_queue[],int n)
{
   int max = INT_MIN;
   for(int i=0;i<n;i++)
   {
      if(request_queue[i] > max)
          max = request_queue[i];
   }
    return max;  
}


int applySCANAlgo(int total_cylinders,int request_queue[], int initial_pos, int seek_sequence[], int direction,int *sequence_size,int n)
{
	int total_head_movement=0,j=0,k=0;
	int left[n+1], right[n+1];  //in worst case(corner cases), size will be n+1

	// appending end values
	// which has to be visited
	// before reversing the direction
	if(direction == 0)
    {
        if(initial_pos > min_element(request_queue,n))
     		right[j++]=total_cylinders-1;
        right[j++]=initial_pos;
    }
    else if(direction == 1)
    {
        if(initial_pos < max_element(request_queue,n))
		   left[k++]=0;  //here  0 is initial cylinder of HDD
        left[k++]=initial_pos;
    }
   
    
	for (int i = 0; i<n; i++) {
		if (request_queue[i] < initial_pos)
			left[k++]=request_queue[i];
		if (request_queue[i] > initial_pos)
			right[j++]=request_queue[i];
	}
   
	// sorting left and right arrays
    qsort((void *)left,k, sizeof(int),comparator);
    qsort((void *)right,j, sizeof(int),comparator);
    

	// run the while loop two times one by one scanning right and left of the head
	int completed = 2;
	while (completed--)
    {
        if (direction == 0) 
        {
			for (int i = 0; i < j; i++) 
            {
                // calculate absolute distance
                total_head_movement += abs(initial_pos - right[i]);	
                initial_pos = right[i];
                // appending current track to seek sequence
                seek_sequence[*sequence_size]=right[i]; 
                (*sequence_size)++;
               
            }
            direction = 1;
		}

		else if (direction == 1)
        {
			for (int i = k - 1; i >= 0; i--) 
            {
                // calculate absolute distance
				total_head_movement +=  abs(initial_pos - left[i]);	
                initial_pos = left[i];
                // appending current track to seek sequence
                seek_sequence[*sequence_size]=left[i]; 
                (*sequence_size)++;
            }
            direction = 0;
		}
		
	}  //end of while
    return total_head_movement;
}  //end of applySCANALgo()

int main()
{
    int total_cylinders,total_head_movement=0,initial_pos,n,direction,pos;
    
  
    printf("\nEnter the total no. of cylinders in HDD:\n");
    scanf("%d",&total_cylinders);

    printf("\nEnter the no. of cylinders to enter in Request queue:\n");
    scanf("%d",&n);
    
    int request_queue[n];
    int seek_sequence[n+10];   // i.e take somewaht bigger size than n
    int sequence_size=0;

    printf("\nEnter the cylinders no. in Request queue :\n");
    for(int i=0;i<n;i++)
     scanf("%d",&request_queue[i]);
    printf("\nEnter the initial Position of RW head: ");
    scanf("%d",&initial_pos);
    printf("\nEnter the direction in which Read Write head is moving:\n ");
    printf("\nEnter 0 if moving to higher cylinder else Enter 1: ");
    scanf("%d",&direction);

    if(initial_pos < 0 || initial_pos > total_cylinders - 1)
    {
        printf("Wrong Initial Position Enetered !!");
        exit(0);
    }
    
    total_head_movement = applySCANAlgo(total_cylinders,request_queue,initial_pos,seek_sequence,direction,&sequence_size,n);
    
    
    // *********** OUTPUT ********** 
    printf("\n\n*********** OUTPUT **********");
    printf("\nSeek Sequence: ");
    for(int i=0;i<sequence_size;i++)
     printf("%d ",seek_sequence[i]);

    printf("\nTotal No. of Head Movements = %d\n",total_head_movement);
    printf("\nAverage head movements = %.2f\n\n",(float)total_head_movement/n);

    return 0;
}


/*.................C Program to Implement SJF ( Shortest Job First) CPU SCheduling Algorithm.....................
SJF - A Non Preemptive Algorithm
This Program works for same as well as different arrival times
*/

#include<stdio.h>
#include<stdbool.h>
#include<limits.h>

struct process_struct
{
  int pid;
  int at;
  int bt;
  int ct,wt,tat,rt,start_time;
}ps[100];

int findmax(int a, int b)
{
    return a>b?a:b;
}

int findmin(int a, int b)
{
    return a<b?a:b;
}

int main()
{
    
    int n;
    bool is_completed[100]={false},is_first_process=true;
    int current_time = 0;
    int completed = 0;;
    printf("Enter total number of processes: ");
    scanf("%d",&n);    
    int sum_tat=0,sum_wt=0,sum_rt=0,total_idle_time=0,prev=0,length_cycle;
    float cpu_utilization;
    int max_completion_time,min_arrival_time;

    for(int i=0;i<n;i++)
    {
        printf("\nEnter Process %d Arrival Time: ",i);
        scanf("%d",&ps[i].at);
        ps[i].pid = i ;
    }
    
    for(int i=0;i<n;i++)
    {
        printf("\nEnter Process %d Burst Time: ",i);
        scanf("%d",&ps[i].bt);
    }
    
    while(completed!=n)
    {
        //find process with min. burst time in ready queue at current time
        int min_index = -1;
        int minimum = INT_MAX;
        for(int i = 0; i < n; i++) {
            if(ps[i].at <= current_time && is_completed[i] == false) {
                if(ps[i].bt < minimum) {
                    minimum = ps[i].bt;
                    min_index = i;
                }
                if(ps[i].bt== minimum) {
                    if(ps[i].at < ps[min_index].at) {
                        minimum= ps[i].bt;
                        min_index = i;
                    }
                }
            }
        }

        if(min_index==-1)
        {
            current_time++;
        }
        else
        {
        ps[min_index].start_time = current_time;
        ps[min_index].ct = ps[min_index].start_time + ps[min_index].bt;
        ps[min_index].tat = ps[min_index].ct - ps[min_index].at;
        ps[min_index].wt = ps[min_index].tat - ps[min_index].bt;
        ps[min_index].rt = ps[min_index].wt;
        // ps[min_index].rt = ps[min_index].start_time - ps[min_index].at;
                
        sum_tat +=ps[min_index].tat;
        sum_wt += ps[min_index].wt;
        sum_rt += ps[min_index].rt;
        total_idle_time += (is_first_process==true) ? 0 : (ps[min_index].start_time -  prev);
        
        completed++;
        is_completed[min_index]=true;
        current_time = ps[min_index].ct;
        prev= current_time;
        is_first_process = false;  
        }
    }
    
    //Calculate Length of Process completion cycle
    max_completion_time = INT_MIN;
    min_arrival_time = INT_MAX;
    for(int i=0;i<n;i++)
    {
        max_completion_time = findmax(max_completion_time,ps[i].ct);
        min_arrival_time = findmin(min_arrival_time,ps[i].at);
    }
    length_cycle = max_completion_time - min_arrival_time;

    //Output
    printf("\nProcess No.\tAT\tCPU Burst Time\tCT\tTAT\tWT\tRT\n");
    for(int i=0;i<n;i++)
     printf("%d\t\t%d\t%d\t\t%d\t%d\t%d\t%d\n",ps[i].pid,ps[i].at,ps[i].bt,ps[i].ct,ps[i].tat,ps[i].wt,ps[i].rt);

    printf("\n");    
    
    cpu_utilization = (float)(length_cycle - total_idle_time)/ length_cycle;

    printf("\nAverage Turn Around time= %f ",(float)sum_tat/n);
    printf("\nAverage Waiting Time= %f ",(float)sum_wt/n);
    printf("\nAverage Response Time= %f ",(float)sum_rt/n);
    printf("\nThroughput= %f",n/(float)length_cycle);    
    printf("\nCPU Utilization(Percentage)= %f",cpu_utilization*100);
    return 0;
}


/*.................C Program to Implement SRTF ( Shortest Remaining Time First) CPU SCheduling Algorithm.....................
SRTF - A Preemptive Algorithm
This Program works for same as well as different arrival times
*/

#include<stdio.h>
#include<stdbool.h>
#include<limits.h>

struct process_struct
{
  int pid;
  int at;
  int bt;
  int ct,wt,tat,rt,start_time;
}ps[100];

int findmax(int a, int b)
{
    return a>b?a:b;
}

int findmin(int a, int b)
{
    return a<b?a:b;
}

int main()
{
    
    int n;
    float bt_remaining[100];
    bool is_completed[100]={false},is_first_process=true;
    int current_time = 0;
    int completed = 0;;
    float sum_tat=0,sum_wt=0,sum_rt=0,total_idle_time=0,length_cycle,prev=0;
    float cpu_utilization;

    int max_completion_time,min_arrival_time;

    printf("Enter total number of processes: ");
    scanf("%d",&n);   
    for(int i=0;i<n;i++)
    {
        printf("\nEnter Process %d Arrival Time: ",i);
        scanf("%d",&ps[i].at);
        ps[i].pid = i ;
    }
    
    for(int i=0;i<n;i++)
    {
        printf("\nEnter Process %d Burst Time: ",i);
        scanf("%d",&ps[i].bt);
        bt_remaining[i]= ps[i].bt;
    }
   
    while(completed!=n)
    {
        //find process with min. burst time in ready queue at current time
        int min_index = -1;
        int minimum = INT_MAX;
        for(int i = 0; i < n; i++) {
            if(ps[i].at <= current_time && is_completed[i] == false) {
                if(bt_remaining[i] < minimum) {
                    minimum = bt_remaining[i];
                    min_index = i;
                }
                if(bt_remaining[i]== minimum) {
                    if(ps[i].at < ps[min_index].at) {
                        minimum= bt_remaining[i];
                        min_index = i;
                    }
                }
            }
        }
  
        
        if(min_index==-1)
        {
            current_time++;
        }
        else
        {
            if(bt_remaining[min_index] == ps[min_index].bt)
            {
                        ps[min_index].start_time = current_time;
                        total_idle_time += (is_first_process==true) ? 0 : (ps[min_index].start_time -  prev);
                        is_first_process=false;
            }
            bt_remaining[min_index] -= 1;
            current_time++; 
            prev=current_time;
            if(bt_remaining[min_index] == 0)
            {
                ps[min_index].ct = current_time;
                ps[min_index].tat = ps[min_index].ct - ps[min_index].at;
                ps[min_index].wt= ps[min_index].tat - ps[min_index].bt;
                ps[min_index].rt = ps[min_index].start_time - ps[min_index].at;
            
             
                sum_tat +=ps[min_index].tat;
                sum_wt += ps[min_index].wt;
                sum_rt += ps[min_index].rt;
                completed++;
                is_completed[min_index]=true;
                //total_idle_time += (is_first_process==true) ? 0 : (ps[min_index].start_time -  prev); 
               // prev= ps[min_index].ct; // or current_time;
            }
        }
    }
    //Calculate Length of Process completion cycle
    max_completion_time = INT_MIN;
    min_arrival_time = INT_MAX;
    for(int i=0;i<n;i++)
    {
        max_completion_time = findmax(max_completion_time,ps[i].ct);
        min_arrival_time = findmin(min_arrival_time,ps[i].at);
    }
    length_cycle = max_completion_time - min_arrival_time;

    //Output
    printf("\nProcess No.\tAT\tCPU Burst Time\tCT\tTAT\tWT\tRT\n");
    for(int i=0;i<n;i++)
     printf("%d\t\t%d\t%d\t\t%d\t%d\t%d\t%d\n",ps[i].pid,ps[i].at,ps[i].bt,ps[i].ct,ps[i].tat,ps[i].wt,ps[i].rt);

    printf("\n");    
    
    cpu_utilization = (float)(length_cycle - total_idle_time)/ length_cycle;

    printf("\nAverage Turn Around time= %f ",(float)sum_tat/n);
    printf("\nAverage Waiting Time= %f ",(float)sum_wt/n);
    printf("\nAverage Response Time= %f ",(float)sum_rt/n);
    printf("\nThroughput= %f",n/(float)length_cycle);    
    printf("\nCPU Utilization(Percentage)= %f",cpu_utilization*100);
    return 0;
}



//C Program to Implement the SSTF Disk Scheduling Algorithm

#include<stdio.h>
#include<stdlib.h> //for abs
#include<stdbool.h>  //for bool
#include<limits.h>  //for INT_MAX
#include<string.h> //for memset

//Function to find and return the closest cylinder to the position of RW head
int findclosestCylinder(int initial_pos, bool visited[],int request_queue[],int n)
{
  int min=INT_MAX,min_index=-1;  
  for(int i=0;i<n;i++)
  {
      if(visited[i] == false && abs(initial_pos - request_queue[i]) < min)
      {
          min = abs(initial_pos - request_queue[i]);
          min_index = i;
      }
  }
  return min_index;

}

int applySSTFAlgo(int request_queue[], int initial_pos,bool visited[],int seek_sequence[],int n)
{
    int i=0;            //used in seek_sequence
    int completed=0,total_head_movement=0;
    while(completed!=n)
    {
      int min_index=findclosestCylinder(initial_pos,visited,request_queue,n);
      //find total head movement
      total_head_movement += abs(initial_pos - request_queue[min_index]);
      initial_pos = request_queue[min_index];
      seek_sequence[i++] = request_queue[min_index];
      visited[min_index]=true;    // so that we don't pick this cylinder in next iteration
      completed++;
    }    
    
    return total_head_movement; 
}

int main()
{
    int total_cylinders,total_head_movement,initial_pos,n;
    
    // *********** INPUT ********** 
    printf("\nEnter the total no. of cylinders in HDD:\n");
    scanf("%d",&total_cylinders);
    if(total_cylinders <= 0) 
    {
      printf("Total Cylinders must be greater than 0");
      exit(0);
    }
    printf("\nEnter the no. of cylinders to enter in Request queue:\n");
    scanf("%d",&n);

    int request_queue[n]; 
    int seek_sequence[n];

    printf("\nEnter the cylinders no. in Request queue :\n");
    for(int i=0;i<n;i++)
     scanf("%d",&request_queue[i]);
    printf("\nEnter the initial Position of RW head: ");
    scanf("%d",&initial_pos);
    
    bool visited[n];        //to keep track of visited cylinder
    memset(visited,false,n*sizeof(bool));
    
    if(initial_pos < 0 || initial_pos > total_cylinders - 1)
    {
        printf("Wrong Initial Position Enetered !!");
        exit(0);
    }
    
    total_head_movement = applySSTFAlgo(request_queue,initial_pos,visited,seek_sequence,n);
    
    
    // *********** OUTPUT ********** 
    printf("\n\n*********** OUTPUT **********");
    printf("\nSeek Sequence: ");
    for(int i=0;i<n;i++)
     printf("%d ",seek_sequence[i]);

    printf("\nTotal No. of Head Movements = %d\n",total_head_movement);
    printf("\nAverage head movements = %.2f\n\n",(float)total_head_movement/n);

    return 0;
}


//C Program to Implement the LRU(Least Recently Used) Page replacement Algorithm

#include<stdio.h>
#include<stdbool.h>
#include<string.h>
#include<limits.h>

struct PageTable
{
    int frame_no;
    int last_time_of_access;
    bool valid;
};
//Function to check if referenced/asked page is already present in frame[] or not 
//Returns true if page is already present else returns false
bool isPagePresent(struct PageTable PT[],int page)
{
    if(PT[page].valid == 1)
       return true;
    return false;    
}

//Function to update the page table
//Return Nothing
void updatePageTable(struct PageTable PT[],int page,int fr_no,int status,int access_time)
{
    PT[page].valid=status;
    if(status == 1 )  
    {  
      PT[page].last_time_of_access =  access_time;
      PT[page].frame_no=fr_no;
    }
}

//Function to print the frame contents
//Return nothing
void printFrameContents(int frame[],int no_of_frames)
{
    for(int i=0;i<no_of_frames;i++)
      printf("%d ",frame[i]);
    printf("\n");  
}

//Function to find the victim page index in frame[]
//Return that LRU page index using call by address
void searchLRUPage(struct PageTable PT[], int frame[], int no_of_frames, int *LRU_page_index)
{
    int min = INT_MAX;
    for(int i=0; i<no_of_frames;i++)
    {
       if(PT[frame[i]].last_time_of_access < min)
       {
           min = PT[frame[i]].last_time_of_access;
           *LRU_page_index = i;
       }
    }

}

int main()
{
    int i,n,no_of_frames,page_fault=0,current=0;
    bool flag=false;
    printf("\n Enter the no. of pages:\n");
    scanf("%d",&n);
    //create reference string array
    int reference_string[n]; 
    printf("\n Enter the reference string(different page numbers) :\n");
    for(int i=0;i<n;i++)
     scanf("%d",&reference_string[i]);
    printf("\n Enter the no. of frames you want to give to the process :");
    scanf("%d",&no_of_frames);
    //create frame array to store the pages at different point of times
    int frame[no_of_frames];
    memset(frame,-1,no_of_frames*sizeof(int));
    struct PageTable PT[50] ; //asume page table can have entries for page 0 to 49
    for(int i=0;i<50;i++)
      PT[i].valid=0;
    
    printf("\n****The Contents inside the Frame array at different time:****\n");
    for(int i=0;i<n;i++) 
    {
      //search the ith page in all allocated frames
      if( ! (isPagePresent(PT,reference_string[i])))
      {
         page_fault++;      // Increase the count of page fault
         if(flag==false && current < no_of_frames)
         {
               
            frame[current]=reference_string[i];
            printFrameContents(frame,no_of_frames);
            updatePageTable(PT,reference_string[i],current,1,i);
            
            current = current + 1;
            if(current == no_of_frames)
            {
                //current=0;
                flag=true;
            }
                 
         }
          
         else //frame are full , APPLY LRU Algo
         {
            //search the LRU page( victim page) with the help of PT 
            //mark that page as INVALID in Page Table
            int LRU_page_index;
            searchLRUPage(PT,frame,no_of_frames,&LRU_page_index);
            updatePageTable(PT,frame[LRU_page_index], -1 ,0,i);  //send invalid frame_no =-1

            frame[LRU_page_index]=reference_string[i];
            printFrameContents(frame,no_of_frames);   
            //Update PT      
            updatePageTable(PT,reference_string[i],LRU_page_index,1,i); 
         }
      }
      //Update the Page Access time for reference_string[i]
      PT[reference_string[i]].last_time_of_access =  i;
    }  //end of for loop
          
   
   printf("\nTotal No. of Page Faults = %d\n",page_fault);
   printf("\nPage Fault ratio = %.2f\n",(float)page_fault/n);
   printf("\nPage Hit Ratio = %.2f\n",(float)(n- page_fault)/n);
   return 0;
}

//C Program to Implement the FIFO(First In First Out) Page replacement Algorithm
//Time Complexity = O(n)
//Space Complexity= O(no of frames + size of Page Table)

#include<stdio.h>
#include<stdbool.h>
#include<string.h>

struct PageTable
{
    int frame_no;
    bool valid;
};

//Function to check if referenced/asked page is already present in frame[] or not 
//Returns true if page is already present else returns false
bool isPagePresent(struct PageTable PT[],int page,int n)
{
    if(PT[page].valid == 1)
       return true;
    return false;   
}

//Function to update the page table
//Return Nothing
void updatePageTable(struct PageTable PT[],int page,int fr_no,int status)
{
    PT[page].valid=status;    
    //if(status == 1 )
       PT[page].frame_no=fr_no;
}

//Function to print the frame contents
//Return nothing
void printFrameContents(int frame[],int no_of_frames)
{
    for(int i=0;i<no_of_frames;i++)
      printf("%d ",frame[i]);
    printf("\n");  
}

int main()
{
    int i,n,no_of_frames,page_fault=0,current=0;
    bool flag=false;
    printf("\n Enter the no. of pages:\n");
    scanf("%d",&n);
    //create reference string array
    int reference_string[n]; 
    printf("\n Enter the reference string(different page numbers) :\n");
    for(int i=0;i<n;i++)
     scanf("%d",&reference_string[i]);
    printf("\n Enter the no. of frames you want to give to the process :");
    scanf("%d",&no_of_frames);
    //create frame array to store the pages at different point of times
    int frame[no_of_frames];
    memset(frame,-1,no_of_frames*sizeof(int));
    struct PageTable PT[50] ; //asume page table can have entries for page 0 to 49
    for(int i=0;i<50;i++)
      PT[i].valid=0;
    
    printf("\n****The Contents inside the Frame array at different time:****\n");
    for(int i=0;i<n;i++) 
    {
      //search the ith page in all allocated frames
      if( ! (isPagePresent(PT,reference_string[i],n)))
      {
         page_fault++;         // Increase the count of page fault
         if(flag==false && current < no_of_frames)
         {
                frame[current]=reference_string[i];
                printFrameContents(frame,no_of_frames);
                updatePageTable(PT,reference_string[i],current,1);
                current = current + 1;
                if(current == no_of_frames)
                {
                   current=0;
                   flag=true;  // so that we do not come to this if block again
                }
                 
         }
          
         else //frame are full , APPLY FIFO
         {
            //find the FIFO page (victim page) to replace;
            //The page pointed by current_head is FIFO page (victim page), so need to find it :)
            //mark that page as INVALID as in Page Table 
            //set invalid frame no as -1 or anything ( as function needs this parameter),
                updatePageTable(PT,frame[current], -1 ,0);   
                frame[current]=reference_string[i];
                printFrameContents(frame,no_of_frames);         
                updatePageTable(PT,reference_string[i],current,1); 
                current = ( current + 1)% no_of_frames;
         }
      } //end of outer if
    }   //end of for loop
          
   
   printf("\nTotal No. of Page Faults = %d\n",page_fault);
   printf("\nPage Fault ratio = %.2f\n",(float)page_fault/n);
   printf("\nPage Hit Ratio = %.2f\n",(float)(n- page_fault)/n);
   return 0;
}
